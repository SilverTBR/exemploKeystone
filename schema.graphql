# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Fabricante {
  id: ID!
  nome: String
  produtos(where: ProdutoWhereInput! = {}, orderBy: [ProdutoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProdutoWhereUniqueInput): [Produto!]
  produtosCount(where: ProdutoWhereInput! = {}): Int
}

input FabricanteWhereUniqueInput {
  id: ID
}

input FabricanteWhereInput {
  AND: [FabricanteWhereInput!]
  OR: [FabricanteWhereInput!]
  NOT: [FabricanteWhereInput!]
  id: IDFilter
  nome: StringFilter
  produtos: ProdutoManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ProdutoManyRelationFilter {
  every: ProdutoWhereInput
  some: ProdutoWhereInput
  none: ProdutoWhereInput
}

input FabricanteOrderByInput {
  id: OrderDirection
  nome: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input FabricanteUpdateInput {
  nome: String
  produtos: ProdutoRelateToManyForUpdateInput
}

input ProdutoRelateToManyForUpdateInput {
  disconnect: [ProdutoWhereUniqueInput!]
  set: [ProdutoWhereUniqueInput!]
  create: [ProdutoCreateInput!]
  connect: [ProdutoWhereUniqueInput!]
}

input FabricanteUpdateArgs {
  where: FabricanteWhereUniqueInput!
  data: FabricanteUpdateInput!
}

input FabricanteCreateInput {
  nome: String
  produtos: ProdutoRelateToManyForCreateInput
}

input ProdutoRelateToManyForCreateInput {
  create: [ProdutoCreateInput!]
  connect: [ProdutoWhereUniqueInput!]
}

type Produto {
  id: ID!
  nome: String
  descricao: Produto_descricao_Document
  preco: Float
  fabricantes: Fabricante
  Departamento: Departamento
}

type Produto_descricao_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProdutoWhereUniqueInput {
  id: ID
}

input ProdutoWhereInput {
  AND: [ProdutoWhereInput!]
  OR: [ProdutoWhereInput!]
  NOT: [ProdutoWhereInput!]
  id: IDFilter
  nome: StringFilter
  preco: FloatFilter
  fabricantes: FabricanteWhereInput
  Departamento: DepartamentoWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input ProdutoOrderByInput {
  id: OrderDirection
  nome: OrderDirection
  preco: OrderDirection
}

input ProdutoUpdateInput {
  nome: String
  descricao: JSON
  preco: Float
  fabricantes: FabricanteRelateToOneForUpdateInput
  Departamento: DepartamentoRelateToOneForUpdateInput
}

input FabricanteRelateToOneForUpdateInput {
  create: FabricanteCreateInput
  connect: FabricanteWhereUniqueInput
  disconnect: Boolean
}

input DepartamentoRelateToOneForUpdateInput {
  create: DepartamentoCreateInput
  connect: DepartamentoWhereUniqueInput
  disconnect: Boolean
}

input ProdutoUpdateArgs {
  where: ProdutoWhereUniqueInput!
  data: ProdutoUpdateInput!
}

input ProdutoCreateInput {
  nome: String
  descricao: JSON
  preco: Float
  fabricantes: FabricanteRelateToOneForCreateInput
  Departamento: DepartamentoRelateToOneForCreateInput
}

input FabricanteRelateToOneForCreateInput {
  create: FabricanteCreateInput
  connect: FabricanteWhereUniqueInput
}

input DepartamentoRelateToOneForCreateInput {
  create: DepartamentoCreateInput
  connect: DepartamentoWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Departamento {
  id: ID!
  nome: String
  Produtos(where: ProdutoWhereInput! = {}, orderBy: [ProdutoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProdutoWhereUniqueInput): [Produto!]
  ProdutosCount(where: ProdutoWhereInput! = {}): Int
}

input DepartamentoWhereUniqueInput {
  id: ID
}

input DepartamentoWhereInput {
  AND: [DepartamentoWhereInput!]
  OR: [DepartamentoWhereInput!]
  NOT: [DepartamentoWhereInput!]
  id: IDFilter
  nome: StringFilter
  Produtos: ProdutoManyRelationFilter
}

input DepartamentoOrderByInput {
  id: OrderDirection
  nome: OrderDirection
}

input DepartamentoUpdateInput {
  nome: String
  Produtos: ProdutoRelateToManyForUpdateInput
}

input DepartamentoUpdateArgs {
  where: DepartamentoWhereUniqueInput!
  data: DepartamentoUpdateInput!
}

input DepartamentoCreateInput {
  nome: String
  Produtos: ProdutoRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createFabricante(data: FabricanteCreateInput!): Fabricante
  createFabricantes(data: [FabricanteCreateInput!]!): [Fabricante]
  updateFabricante(where: FabricanteWhereUniqueInput!, data: FabricanteUpdateInput!): Fabricante
  updateFabricantes(data: [FabricanteUpdateArgs!]!): [Fabricante]
  deleteFabricante(where: FabricanteWhereUniqueInput!): Fabricante
  deleteFabricantes(where: [FabricanteWhereUniqueInput!]!): [Fabricante]
  createProduto(data: ProdutoCreateInput!): Produto
  createProdutos(data: [ProdutoCreateInput!]!): [Produto]
  updateProduto(where: ProdutoWhereUniqueInput!, data: ProdutoUpdateInput!): Produto
  updateProdutos(data: [ProdutoUpdateArgs!]!): [Produto]
  deleteProduto(where: ProdutoWhereUniqueInput!): Produto
  deleteProdutos(where: [ProdutoWhereUniqueInput!]!): [Produto]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createDepartamento(data: DepartamentoCreateInput!): Departamento
  createDepartamentos(data: [DepartamentoCreateInput!]!): [Departamento]
  updateDepartamento(where: DepartamentoWhereUniqueInput!, data: DepartamentoUpdateInput!): Departamento
  updateDepartamentos(data: [DepartamentoUpdateArgs!]!): [Departamento]
  deleteDepartamento(where: DepartamentoWhereUniqueInput!): Departamento
  deleteDepartamentos(where: [DepartamentoWhereUniqueInput!]!): [Departamento]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  fabricantes(where: FabricanteWhereInput! = {}, orderBy: [FabricanteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FabricanteWhereUniqueInput): [Fabricante!]
  fabricante(where: FabricanteWhereUniqueInput!): Fabricante
  fabricantesCount(where: FabricanteWhereInput! = {}): Int
  produtos(where: ProdutoWhereInput! = {}, orderBy: [ProdutoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProdutoWhereUniqueInput): [Produto!]
  produto(where: ProdutoWhereUniqueInput!): Produto
  produtosCount(where: ProdutoWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  departamentos(where: DepartamentoWhereInput! = {}, orderBy: [DepartamentoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DepartamentoWhereUniqueInput): [Departamento!]
  departamento(where: DepartamentoWhereUniqueInput!): Departamento
  departamentosCount(where: DepartamentoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
